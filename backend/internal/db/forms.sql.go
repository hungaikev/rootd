// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: forms.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateForm = `-- name: CreateForm :one
INSERT INTO forms (
    name, description, schema, owner_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, description, schema, owner_id, created_at, updated_at
`

type CreateFormParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Schema      []byte      `json:"schema"`
	OwnerID     pgtype.UUID `json:"owner_id"`
}

func (q *Queries) CreateForm(ctx context.Context, arg *CreateFormParams) (*Form, error) {
	row := q.db.QueryRow(ctx, CreateForm,
		arg.Name,
		arg.Description,
		arg.Schema,
		arg.OwnerID,
	)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Schema,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteForm = `-- name: DeleteForm :exec
DELETE FROM forms 
WHERE id = $1
`

func (q *Queries) DeleteForm(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteForm, id)
	return err
}

const GetForm = `-- name: GetForm :one
SELECT id, name, description, schema, owner_id, created_at, updated_at FROM forms 
WHERE id = $1
`

func (q *Queries) GetForm(ctx context.Context, id pgtype.UUID) (*Form, error) {
	row := q.db.QueryRow(ctx, GetForm, id)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Schema,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListForms = `-- name: ListForms :many
SELECT id, name, description, schema, owner_id, created_at, updated_at FROM forms 
WHERE owner_id = $1 
ORDER BY created_at DESC
`

func (q *Queries) ListForms(ctx context.Context, ownerID pgtype.UUID) ([]*Form, error) {
	rows, err := q.db.Query(ctx, ListForms, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Form{}
	for rows.Next() {
		var i Form
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Schema,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateForm = `-- name: UpdateForm :one
UPDATE forms 
SET 
    name = $2,
    description = $3,
    schema = $4,
    updated_at = NOW()
WHERE id = $1 
RETURNING id, name, description, schema, owner_id, created_at, updated_at
`

type UpdateFormParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Schema      []byte      `json:"schema"`
}

func (q *Queries) UpdateForm(ctx context.Context, arg *UpdateFormParams) (*Form, error) {
	row := q.db.QueryRow(ctx, UpdateForm,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Schema,
	)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Schema,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
