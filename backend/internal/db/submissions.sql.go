// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: submissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateSubmission = `-- name: CreateSubmission :one
INSERT INTO submissions (
    workflow_id, schema_id, data, metadata, status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, workflow_id, schema_id, data, metadata, status, created_at, updated_at
`

type CreateSubmissionParams struct {
	WorkflowID pgtype.UUID `json:"workflow_id"`
	SchemaID   pgtype.UUID `json:"schema_id"`
	Data       []byte      `json:"data"`
	Metadata   []byte      `json:"metadata"`
	Status     string      `json:"status"`
}

func (q *Queries) CreateSubmission(ctx context.Context, arg *CreateSubmissionParams) (*Submission, error) {
	row := q.db.QueryRow(ctx, CreateSubmission,
		arg.WorkflowID,
		arg.SchemaID,
		arg.Data,
		arg.Metadata,
		arg.Status,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.SchemaID,
		&i.Data,
		&i.Metadata,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteSubmission = `-- name: DeleteSubmission :exec
DELETE FROM submissions 
WHERE id = $1
`

func (q *Queries) DeleteSubmission(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteSubmission, id)
	return err
}

const GetSubmission = `-- name: GetSubmission :one
SELECT id, workflow_id, schema_id, data, metadata, status, created_at, updated_at FROM submissions 
WHERE id = $1
`

func (q *Queries) GetSubmission(ctx context.Context, id pgtype.UUID) (*Submission, error) {
	row := q.db.QueryRow(ctx, GetSubmission, id)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.SchemaID,
		&i.Data,
		&i.Metadata,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListSubmissions = `-- name: ListSubmissions :many
SELECT id, workflow_id, schema_id, data, metadata, status, created_at, updated_at FROM submissions 
WHERE workflow_id = $1 
ORDER BY created_at DESC
`

func (q *Queries) ListSubmissions(ctx context.Context, workflowID pgtype.UUID) ([]*Submission, error) {
	rows, err := q.db.Query(ctx, ListSubmissions, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Submission{}
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.SchemaID,
			&i.Data,
			&i.Metadata,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListSubmissionsByOwner = `-- name: ListSubmissionsByOwner :many
SELECT s.id, s.workflow_id, s.schema_id, s.data, s.metadata, s.status, s.created_at, s.updated_at FROM submissions s
JOIN workflows w ON s.workflow_id = w.id
WHERE w.owner_id = $1 
ORDER BY s.created_at DESC
`

func (q *Queries) ListSubmissionsByOwner(ctx context.Context, ownerID pgtype.UUID) ([]*Submission, error) {
	rows, err := q.db.Query(ctx, ListSubmissionsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Submission{}
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.SchemaID,
			&i.Data,
			&i.Metadata,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSubmissionStatus = `-- name: UpdateSubmissionStatus :one
UPDATE submissions 
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1 
RETURNING id, workflow_id, schema_id, data, metadata, status, created_at, updated_at
`

type UpdateSubmissionStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status string      `json:"status"`
}

func (q *Queries) UpdateSubmissionStatus(ctx context.Context, arg *UpdateSubmissionStatusParams) (*Submission, error) {
	row := q.db.QueryRow(ctx, UpdateSubmissionStatus, arg.ID, arg.Status)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.SchemaID,
		&i.Data,
		&i.Metadata,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
