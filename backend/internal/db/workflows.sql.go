// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: workflows.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateWorkflow = `-- name: CreateWorkflow :one
INSERT INTO workflows (
    name, description, status, owner_id, schema_id, trigger, actions
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, description, status, owner_id, schema_id, trigger, actions, created_at, updated_at
`

type CreateWorkflowParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Status      string      `json:"status"`
	OwnerID     pgtype.UUID `json:"owner_id"`
	SchemaID    pgtype.UUID `json:"schema_id"`
	Trigger     []byte      `json:"trigger"`
	Actions     []byte      `json:"actions"`
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg *CreateWorkflowParams) (*Workflow, error) {
	row := q.db.QueryRow(ctx, CreateWorkflow,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.OwnerID,
		arg.SchemaID,
		arg.Trigger,
		arg.Actions,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.OwnerID,
		&i.SchemaID,
		&i.Trigger,
		&i.Actions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteWorkflow = `-- name: DeleteWorkflow :exec
DELETE FROM workflows 
WHERE id = $1
`

func (q *Queries) DeleteWorkflow(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteWorkflow, id)
	return err
}

const GetWorkflow = `-- name: GetWorkflow :one
SELECT id, name, description, status, owner_id, schema_id, trigger, actions, created_at, updated_at FROM workflows 
WHERE id = $1
`

func (q *Queries) GetWorkflow(ctx context.Context, id pgtype.UUID) (*Workflow, error) {
	row := q.db.QueryRow(ctx, GetWorkflow, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.OwnerID,
		&i.SchemaID,
		&i.Trigger,
		&i.Actions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetWorkflowSubmissionSummary = `-- name: GetWorkflowSubmissionSummary :one
SELECT 
    COUNT(DISTINCT s.id) as total_submissions,
    COUNT(DISTINCT s.id) as total_visits, -- For now, same as submissions
    COALESCE(AVG(EXTRACT(EPOCH FROM (s.created_at - s.created_at))), 0) as average_time_to_complete,
    MAX(s.created_at) as last_submission_at
FROM submissions s
WHERE s.workflow_id = $1
`

type GetWorkflowSubmissionSummaryRow struct {
	TotalSubmissions      int64       `json:"total_submissions"`
	TotalVisits           int64       `json:"total_visits"`
	AverageTimeToComplete interface{} `json:"average_time_to_complete"`
	LastSubmissionAt      interface{} `json:"last_submission_at"`
}

func (q *Queries) GetWorkflowSubmissionSummary(ctx context.Context, workflowID pgtype.UUID) (*GetWorkflowSubmissionSummaryRow, error) {
	row := q.db.QueryRow(ctx, GetWorkflowSubmissionSummary, workflowID)
	var i GetWorkflowSubmissionSummaryRow
	err := row.Scan(
		&i.TotalSubmissions,
		&i.TotalVisits,
		&i.AverageTimeToComplete,
		&i.LastSubmissionAt,
	)
	return &i, err
}

const ListWorkflows = `-- name: ListWorkflows :many
SELECT id, name, description, status, owner_id, schema_id, trigger, actions, created_at, updated_at FROM workflows 
WHERE owner_id = $1 
ORDER BY created_at DESC
`

func (q *Queries) ListWorkflows(ctx context.Context, ownerID pgtype.UUID) ([]*Workflow, error) {
	rows, err := q.db.Query(ctx, ListWorkflows, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Workflow{}
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.OwnerID,
			&i.SchemaID,
			&i.Trigger,
			&i.Actions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateWorkflow = `-- name: UpdateWorkflow :one
UPDATE workflows 
SET 
    name = $2,
    description = $3,
    schema_id = $4,
    trigger = $5,
    actions = $6,
    updated_at = NOW()
WHERE id = $1 
RETURNING id, name, description, status, owner_id, schema_id, trigger, actions, created_at, updated_at
`

type UpdateWorkflowParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	SchemaID    pgtype.UUID `json:"schema_id"`
	Trigger     []byte      `json:"trigger"`
	Actions     []byte      `json:"actions"`
}

func (q *Queries) UpdateWorkflow(ctx context.Context, arg *UpdateWorkflowParams) (*Workflow, error) {
	row := q.db.QueryRow(ctx, UpdateWorkflow,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.SchemaID,
		arg.Trigger,
		arg.Actions,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.OwnerID,
		&i.SchemaID,
		&i.Trigger,
		&i.Actions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateWorkflowStatus = `-- name: UpdateWorkflowStatus :one
UPDATE workflows 
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1 
RETURNING id, name, description, status, owner_id, schema_id, trigger, actions, created_at, updated_at
`

type UpdateWorkflowStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status string      `json:"status"`
}

func (q *Queries) UpdateWorkflowStatus(ctx context.Context, arg *UpdateWorkflowStatusParams) (*Workflow, error) {
	row := q.db.QueryRow(ctx, UpdateWorkflowStatus, arg.ID, arg.Status)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.OwnerID,
		&i.SchemaID,
		&i.Trigger,
		&i.Actions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
